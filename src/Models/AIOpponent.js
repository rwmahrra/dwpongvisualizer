/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";

// client.onConnectionLost = onConnectionLost;
// client.onMessageArrived = onMessageArrived;

// const mqtt = require('mqtt')
// const client = mqtt.connect(process.env.REACT_APP_URL)
// client.on('connect', function () {
//   client.subscribe('puck/position', function (err) {
//     if (!err) {
//       console.log("connection puck")
//     }
//   })

//   client.subscribe('paddle1/position', function (err) {
//     if (!err) {
//       console.log("connection pad1")
//     }
//   })

//   client.subscribe('paddle2/position', function (err) {
//     if (!err) {
//       console.log("connection pad2")
//     }
//   })

//   client.subscribe('motion/position', function (err) {
//     if (!err) {
//       console.log("connection position")
//     }
//   })
// });


const morphTargets = {
  Happy: "Happy",
  Frustrated: "Frustrated",
  Mad: "Mad",
  Smug: "Smug",
  Sad: "Sad",
  Right: "Right",
  Left: "Left",
  Confused: "Confused",
}


export default function AIOpponent(props) {


  const group = useRef();
  const face = useRef();
  const { nodes, materials } = useGLTF("/AIOpponent.glb");

  useEffect(() => {
    console.log(face.current.morphTargetDictionary)
    console.log(face.current.morphTargetInfluences)

    face.current.morphTargetInfluences[2] = 1;
  })


  return (
    <group ref={group} {...props} dispose={null}>
      <group scale={[1.07, 1.07, 1]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001.geometry}
          material={nodes.Cube001.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001_1.geometry}
          material={materials.Backing}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Backing001.geometry}
          material={nodes.Backing001.material}
          position={[0, 0, -0.02]}
          rotation={[0, 0, -Math.PI / 4]}
          scale={[0.94, 0.94, 1]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Backing002.geometry}
          material={nodes.Backing002.material}
          position={[0, 0, -0.02]}
          rotation={[0, 0, -2.36]}
          scale={[0.94, 0.94, 1]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Hour_Hand.geometry}
          material={nodes.Hour_Hand.material}
          rotation={[0, 0, 0.6]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mintue_Hand.geometry}
          material={nodes.Mintue_Hand.material}
          rotation={[0, 0, -0.48]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Times.geometry}
          material={nodes.Times.material}
        />
      </group>
      <mesh
        ref = {face}
        name="Face"
        castShadow
        receiveShadow
        geometry={nodes.Face.geometry}
        material={nodes.Face.material}
        morphTargetDictionary={nodes.Face.morphTargetDictionary}
        morphTargetInfluences={nodes.Face.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/AIOpponent.glb");
